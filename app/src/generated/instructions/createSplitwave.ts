/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SplitParticipant,
  splitParticipantBeet,
} from '../types/SplitParticipant'

/**
 * @category Instructions
 * @category CreateSplitwave
 * @category generated
 */
export type CreateSplitwaveInstructionArgs = {
  totalAmountToRecipient: beet.bignum
  participants: SplitParticipant[]
  splitwaveTreasuryBump: number
}
/**
 * @category Instructions
 * @category CreateSplitwave
 * @category generated
 */
export const createSplitwaveStruct = new beet.FixableBeetArgsStruct<
  CreateSplitwaveInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['totalAmountToRecipient', beet.u64],
    ['participants', beet.array(splitParticipantBeet)],
    ['splitwaveTreasuryBump', beet.u8],
  ],
  'CreateSplitwaveInstructionArgs'
)
/**
 * Accounts required by the _createSplitwave_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] recipient
 * @property [_writable_] recipientTokenAccount
 * @property [_writable_] splitwave
 * @property [_writable_] splitwaveTreasury
 * @property [] splitwaveMint
 * @property [_writable_] splitwaveId
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CreateSplitwave
 * @category generated
 */
export type CreateSplitwaveInstructionAccounts = {
  authority: web3.PublicKey
  recipient: web3.PublicKey
  recipientTokenAccount: web3.PublicKey
  splitwave: web3.PublicKey
  splitwaveTreasury: web3.PublicKey
  splitwaveMint: web3.PublicKey
  splitwaveId: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createSplitwaveInstructionDiscriminator = [
  232, 79, 201, 54, 123, 142, 215, 30,
]

/**
 * Creates a _CreateSplitwave_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateSplitwave
 * @category generated
 */
export function createCreateSplitwaveInstruction(
  accounts: CreateSplitwaveInstructionAccounts,
  args: CreateSplitwaveInstructionArgs,
  programId = new web3.PublicKey('pp1aQnBZ8271r5LcZymbudhTXbExDQiH2CzDj3N6ujY')
) {
  const [data] = createSplitwaveStruct.serialize({
    instructionDiscriminator: createSplitwaveInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.recipient,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.recipientTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splitwave,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splitwaveTreasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splitwaveMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splitwaveId,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
